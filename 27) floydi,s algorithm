#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 10

void floyd(int graph[MAX_VERTICES][MAX_VERTICES], int num_vertices) {
    int distance[MAX_VERTICES][MAX_VERTICES];

    // Initialize the distance matrix
    for (int i = 0; i < num_vertices; ++i) {
        for (int j = 0; j < num_vertices; ++j) {
            distance[i][j] = graph[i][j];
        }
    }

    // Apply Floyd's algorithm
    for (int k = 0; k < num_vertices; ++k) {
        for (int i = 0; i < num_vertices; ++i) {
            for (int j = 0; j < num_vertices; ++j) {
                if (distance[i][k] != INT_MAX && distance[k][j] != INT_MAX &&
                    distance[i][k] + distance[k][j] < distance[i][j]) {
                    distance[i][j] = distance[i][k] + distance[k][j];
                }
            }
        }
    }

    // Output the shortest paths
    printf("Shortest paths between all pairs of vertices:\n");
    for (int i = 0; i < num_vertices; ++i) {
        for (int j = 0; j < num_vertices; ++j) {
            if (distance[i][j] == INT_MAX) {
                printf("INF\t");
            } else {
                printf("%d\t", distance[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    int num_vertices;

    printf("Enter the number of vertices (max %d): ", MAX_VERTICES);
    scanf("%d", &num_vertices);

    int graph[MAX_VERTICES][MAX_VERTICES];

    printf("Enter the adjacency matrix (use INF for infinity):\n");
    for (int i = 0; i < num_vertices; ++i) {
        for (int j = 0; j < num_vertices; ++j) {
            scanf("%d", &graph[i][j]);
            if (graph[i][j] == -1) {
                graph[i][j] = INT_MAX; // Replace -1 with INT_MAX for simplicity
            }
        }
    }

    floyd(graph, num_vertices);

    return 0;
}
